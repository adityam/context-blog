<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Random Determinism</title>
    <link>https://adityam.github.io/context-blog/post/</link>
    <description>Recent content in Posts on Random Determinism</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 27 Dec 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://adityam.github.io/context-blog/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Interfacing LuaTeX with Julia</title>
      <link>https://adityam.github.io/context-blog/post/interfacing-with-julia/</link>
      <pubDate>Wed, 27 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://adityam.github.io/context-blog/post/interfacing-with-julia/</guid>
      <description>&lt;p&gt;One cool feature of LuaTeX is ability to interface with external
libraries using Lua&amp;rsquo;s &lt;a href=&#34;http://luajit.org/ext_ffi.html&#34;&gt;Foreign Function Interface (FFI)&lt;/a&gt;. An
extreme example of this is Luigi Scarso&amp;rsquo;s &lt;a href=&#34;https://www.tug.org/TUGboat/tb30-3/tb96scarso.pdf&#34;&gt;LuaTeX lunatic&lt;/a&gt;,
which provides a two way bridge between Python and LuaTeX. Not being a Python
fan, I never looked into the implementation details, in spite of Luigi&amp;rsquo;s
impressive examples.&lt;/p&gt;

&lt;p&gt;Recently, Henri Menke &lt;a href=&#34;https://tex.stackexchange.com/a/403794/323&#34;&gt;posted an interesting
example&lt;/a&gt; that shows how to use a
function from &lt;a href=&#34;https://www.gnu.org/software/gsl/&#34;&gt;GNU Scientific Library
(GSL)&lt;/a&gt; to inteface with &lt;a href=&#34;http://pgfplots.sourceforge.net&#34;&gt;pgfplots&lt;/a&gt;. This
got me interested in looking into Lua&amp;rsquo;s FFI in detail. After a bit of trial
and error, I finally figured out how to interface LuaTeX with my current
favorite programming language: &lt;a href=&#34;https://julialang.org&#34;&gt;Julia&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using Font Awesome</title>
      <link>https://adityam.github.io/context-blog/post/using-fontawesome/</link>
      <pubDate>Sun, 26 Nov 2017 20:09:19 -0500</pubDate>
      
      <guid>https://adityam.github.io/context-blog/post/using-fontawesome/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://fontawesome.io/icons/&#34;&gt;Font Awesome&lt;/a&gt; is a font that provides pictographic icons and is commonly used
to display icons for email, editing tasks, popular social media website, etc.
It is easy to use Font Awesome in ConTeXt: the font ships with &lt;a href=&#34;http://wiki.contextgarden.net/ConTeXt_Standalone&#34;&gt;ConTeXt
Standalone&lt;/a&gt; and ConTeXt includes a &lt;code&gt;symbolset&lt;/code&gt; to easily access the icons
using names rather than icon numbers.&lt;/p&gt;

&lt;p&gt;To use FontAwesome icons in ConTeXt, simply load the symbolset &lt;code&gt;fontawesome&lt;/code&gt;
using&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&lt;span class=&#34;Identifier&#34;&gt;\usesymbols&lt;/span&gt;&lt;span class=&#34;Delimiter&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;Type&#34;&gt;fontawesome&lt;/span&gt;&lt;span class=&#34;Delimiter&#34;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and then any icon is accessible using&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&lt;span class=&#34;Statement&#34;&gt;\symbol&lt;/span&gt;&lt;span class=&#34;Delimiter&#34;&gt;[&lt;/span&gt;fontawesome&lt;span class=&#34;Delimiter&#34;&gt;][&lt;/span&gt;...&lt;span class=&#34;Delimiter&#34;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;where &lt;code&gt;...&lt;/code&gt; is the name of the icon is listed in &lt;a href=&#34;http://fontawesome.io/icons/&#34;&gt;the Font Awesome icon list&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Comibined characters in Math</title>
      <link>https://adityam.github.io/context-blog/post/math-combined-characters/</link>
      <pubDate>Sun, 15 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://adityam.github.io/context-blog/post/math-combined-characters/</guid>
      <description>&lt;p&gt;There is a new feature in ConTeXt that replaces some &lt;em&gt;ascii math&lt;/em&gt; (I am using
this term informally. The symbols do not match the &lt;a href=&#34;http://asciimath.org&#34;&gt;asciimath&lt;/a&gt; symbol list).
It is enabled by default and replaces a combination of characters by a glyph.
For example,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;A function &lt;span class=&#34;String&#34;&gt;$f$&lt;/span&gt; is an increasing function
  &lt;span class=&#34;Identifier&#34;&gt;\startformula&lt;/span&gt;
&lt;span class=&#34;String&#34;&gt;    x &amp;lt;= y  ===&amp;gt; f(x) &amp;lt;= f(y)&lt;/span&gt;
&lt;span class=&#34;String&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;Identifier&#34;&gt;\stopformula&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;gives&lt;/p&gt;

&lt;img class=&#34;center&#34;
  alt=&#34;{map[src:/context-blog/post/math-combined-characters/ex-1.png class:center alt:Example of combined characters]  Page(&amp;#34;Comibined characters in Math&amp;#34;) &amp;lt;nil&amp;gt; true &amp;lt;nil&amp;gt;}&#34;
  src=&#34;https://adityam.github.io/context-blog/context-blog/post/math-combined-characters/ex-1.png&#34; /&gt;


&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Typesetting differential equations</title>
      <link>https://adityam.github.io/context-blog/post/typesetting-differential-equations/</link>
      <pubDate>Mon, 18 Sep 2017 00:10:55 -0400</pubDate>
      
      <guid>https://adityam.github.io/context-blog/post/typesetting-differential-equations/</guid>
      <description>&lt;p&gt;This semester I am teaching a course involving linear differential equations,
so I have typeset many differential equations that look like this:&lt;/p&gt;

&lt;img class=&#34;center&#34;
  alt=&#34;{map[src:/context-blog/post/typesetting-differential-equations/LDE.png class:center alt:Simple example]  Page(&amp;#34;Typesetting differential equations&amp;#34;) &amp;lt;nil&amp;gt; true &amp;lt;nil&amp;gt;}&#34;
  src=&#34;https://adityam.github.io/context-blog/context-blog/post/typesetting-differential-equations/LDE.png&#34; /&gt;


&lt;p&gt;Believe me, writing such equations by hand gets tedious very quickly. So, I
wanted a macro &lt;code&gt;\LDE&lt;/code&gt; (for Linear Differential Equation), so that I
could just type&lt;/p&gt;

&lt;!--
\LDE{1, -3, 2}{2, 1}
--&gt;

&lt;pre&gt;&lt;code&gt;&lt;span class=&#34;Statement&#34;&gt;\LDE&lt;/span&gt;&lt;span class=&#34;Delimiter&#34;&gt;{&lt;/span&gt;1, -3, 2&lt;span class=&#34;Delimiter&#34;&gt;}{&lt;/span&gt;2, 1&lt;span class=&#34;Delimiter&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and get the above result. This post describes how to write such a macro using
LuaTeX + ConTeXt.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Frame with solid left line</title>
      <link>https://adityam.github.io/context-blog/post/frame-with-solid-left-line/</link>
      <pubDate>Fri, 18 Aug 2017 00:40:19 -0400</pubDate>
      
      <guid>https://adityam.github.io/context-blog/post/frame-with-solid-left-line/</guid>
      <description>&lt;p&gt;Adding a solid line of the left side of a frame, block quote, etc. creates a
simple, clean, and attractive visual effect that I like.&lt;/p&gt;

&lt;img class=&#34;center&#34;
  alt=&#34;{map[src:/context-blog/post/frame-with-solid-left-line/leftframe-0.png class:center alt:Simple example]  Page(&amp;#34;Frame with solid left line&amp;#34;) &amp;lt;nil&amp;gt; true &amp;lt;nil&amp;gt;}&#34;
  src=&#34;https://adityam.github.io/context-blog/context-blog/post/frame-with-solid-left-line/leftframe-0.png&#34; /&gt;


&lt;p&gt;I don&amp;rsquo;t know when I first came across this style, but it is used commonly on
the Internet to show blockquotes. So, how do we get this style with ConTeXT?&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Drop shadows with lifted corners</title>
      <link>https://adityam.github.io/context-blog/post/drop-shadow-with-lifted-corners/</link>
      <pubDate>Sun, 06 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://adityam.github.io/context-blog/post/drop-shadow-with-lifted-corners/</guid>
      <description>&lt;p&gt;There is an old question on &lt;a href=&#34;https://tex.stackexchange.com/questions/180431/lifted-or-curved-drop-shadow&#34;&gt;TeX.SE&lt;/a&gt; asking how to draw drop shadows with a
&lt;em&gt;lifted&lt;/em&gt; corner. For fun, I decided to translate the code to Metapost and
release it as a module: &lt;a href=&#34;https://github.com/adityam/context-backgrounds&#34;&gt;&lt;code&gt;t-backgrounds&lt;/code&gt;&lt;/a&gt;. I hope to add a few
other backgrounds to the module in the near future.&lt;/p&gt;

&lt;p&gt;The module provides two overlays &lt;code&gt;liftedshadow:big&lt;/code&gt; and &lt;code&gt;liftedshadow:medium&lt;/code&gt;.
These may be used like any other overlay. Let&amp;rsquo;s see an example:&lt;/p&gt;

&lt;img class=&#34;center&#34;
  alt=&#34;{map[class:center alt:Simple example src:/context-blog/post/drop-shadow-with-lifted-corners/example.png]  Page(&amp;#34;Drop shadows with lifted corners&amp;#34;) &amp;lt;nil&amp;gt; true &amp;lt;nil&amp;gt;}&#34;
  src=&#34;https://adityam.github.io/context-blog/context-blog/post/drop-shadow-with-lifted-corners/example.png&#34; /&gt;


&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Correct math escape in t-vim</title>
      <link>https://adityam.github.io/context-blog/post/correct-math-escape-in-t-vim/</link>
      <pubDate>Sat, 22 Jul 2017 21:53:37 -0400</pubDate>
      
      <guid>https://adityam.github.io/context-blog/post/correct-math-escape-in-t-vim/</guid>
      <description>&lt;p&gt;There is a feature in &lt;a href=&#34;https://github.com/adityam/filter/blob/master/vim-README.md&#34;&gt;&lt;code&gt;t-vim&lt;/code&gt;&lt;/a&gt; module that allows the use of TeX code
in comments, which is useful when typeset math in comments. For example:&lt;/p&gt;

&lt;!--
\definevimtyping[C][syntax=c, escape=on]

\startC
/* The following function computes the roots of \m{ax^2+bx+c=0}
 * using the determinant \m{\Delta=\frac{-b\pm\sqrt{b^2-2ac}}{2a}} 
 */

double root (double a, double b, double c) {....}
\stopC
--&gt;

&lt;pre&gt;&lt;code&gt;&lt;span class=&#34;Identifier&#34;&gt;\definevimtyping&lt;/span&gt;&lt;span class=&#34;Delimiter&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;Type&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;Delimiter&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;Type&#34;&gt;syntax=c, escape=on&lt;/span&gt;&lt;span class=&#34;Delimiter&#34;&gt;]&lt;/span&gt;

&lt;span class=&#34;Keyword&#34;&gt;\startC&lt;/span&gt;
&lt;span class=&#34;Comment&#34;&gt;/*&lt;/span&gt;&lt;span class=&#34;Comment&#34;&gt; The following function computes the roots of &lt;span class=&#34;Statement&#34;&gt;\m&lt;/span&gt;&lt;span class=&#34;Delimiter&#34;&gt;{&lt;/span&gt;ax^2+bx+c=0&lt;span class=&#34;Delimiter&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;Comment&#34;&gt; * using the determinant &lt;span class=&#34;Statement&#34;&gt;\m&lt;/span&gt;&lt;span class=&#34;Delimiter&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;Statement&#34;&gt;\Delta&lt;/span&gt;=&lt;span class=&#34;Statement&#34;&gt;\frac&lt;/span&gt;&lt;span class=&#34;Delimiter&#34;&gt;{&lt;/span&gt;-b&lt;span class=&#34;Statement&#34;&gt;\pm\sqrt&lt;/span&gt;&lt;span class=&#34;Delimiter&#34;&gt;{&lt;/span&gt;b^2-2ac&lt;span class=&#34;Delimiter&#34;&gt;}}{&lt;/span&gt;2a&lt;span class=&#34;Delimiter&#34;&gt;}}&lt;/span&gt;
&lt;span class=&#34;Comment&#34;&gt; &lt;/span&gt;&lt;span class=&#34;Comment&#34;&gt;*/&lt;/span&gt;

&lt;span class=&#34;Type&#34;&gt;double&lt;/span&gt; root (&lt;span class=&#34;Type&#34;&gt;double&lt;/span&gt; a, &lt;span class=&#34;Type&#34;&gt;double&lt;/span&gt; b, &lt;span class=&#34;Type&#34;&gt;double&lt;/span&gt; c) {....}
&lt;span class=&#34;Keyword&#34;&gt;\stopC&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rising from the ashes</title>
      <link>https://adityam.github.io/context-blog/post/moving-from-wordpress/</link>
      <pubDate>Sat, 10 Jun 2017 16:26:40 -0700</pubDate>
      
      <guid>https://adityam.github.io/context-blog/post/moving-from-wordpress/</guid>
      <description>&lt;p&gt;I used to blog on &lt;a href=&#34;https://randomdeterminism.wordpress.com&#34;&gt;Wordpress&lt;/a&gt;, mainly about ConTeXt, but occasionally about
other stuff as well. It has been almost three years since I last posted
there. I got busy. Both in my personal and professional life. This is an
attempt to restart that blog.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Metapost and TeX labels</title>
      <link>https://adityam.github.io/context-blog/post/metapost-and-tex-labels/</link>
      <pubDate>Wed, 22 Jan 2014 19:25:23 -0700</pubDate>
      
      <guid>https://adityam.github.io/context-blog/post/metapost-and-tex-labels/</guid>
      <description>&lt;p&gt;Default Metapost has the concept of two types of labels, postscript labels and
TeX labels. Postscript labels are created using&lt;/p&gt;

&lt;!--
label(&#34;text&#34;, location);
--&gt;

&lt;pre&gt;&lt;code&gt;&lt;span class=&#34;Macro&#34;&gt;label&lt;/span&gt;(&lt;span class=&#34;String&#34;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;, location);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;while TeX labels are created using&lt;/p&gt;

&lt;!-- 
label(btex text etex, location);
--&gt;

&lt;pre&gt;&lt;code&gt;&lt;span class=&#34;Macro&#34;&gt;label&lt;/span&gt;(&lt;span class=&#34;Statement&#34;&gt;btex&lt;/span&gt;&lt;span class=&#34;String&#34;&gt; text &lt;/span&gt;&lt;span class=&#34;Statement&#34;&gt;etex&lt;/span&gt;, location);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the latter case,  Metapost collects everything between &lt;code&gt;btex&lt;/code&gt; and &lt;code&gt;etex&lt;/code&gt;
in a separate file, processes that file through TeX, and includes the
resulting postscript code at an appropriate location. Such a Rube
Golberg-esque mechanism is needed to propertly typeset mathematics, get
proper kerning, etc.; tasks that TeX can do but Postscript cannot.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Creating a clean presentation style in 40 commits</title>
      <link>https://adityam.github.io/context-blog/post/presentation-40-commits/</link>
      <pubDate>Sun, 13 Jan 2013 19:54:48 -0700</pubDate>
      
      <guid>https://adityam.github.io/context-blog/post/presentation-40-commits/</guid>
      <description>Did you always want to learn ConTeXt, but did not know where to start? I have written a git-based tutorial that should help you get started.
The idea of the tutorial is to start with an empty document, and add features one-by-one. Each git commit corresponds to one small change in the document, and includes pointers to the documentation corresponding to that change. Read Use this tutorial as follows:
 Clone the git repository:</description>
    </item>
    
    <item>
      <title>Separation of content and presentation in tables</title>
      <link>https://adityam.github.io/context-blog/post/formatting-tables/</link>
      <pubDate>Sun, 18 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>https://adityam.github.io/context-blog/post/formatting-tables/</guid>
      <description>&lt;p&gt;Separation of content and presentation is one of the selling points of TeX over word-processors. Strictly speaking, TeX is not superior compared to word-processors in this regard. It is possible to obtain a clean separation between content and presentation in word-processors (using styles) and it is possible to mix content and presentation in TeX code, as is illustrated by the following example from &lt;a href=&#34;http://css.paperplaza.net/conferences/support/files/sample.tex&#34;&gt;sample tex file&lt;/a&gt; for the &lt;a href=&#34;http://control.disp.uniroma2.it/cdc2012/author_info.php&#34;&gt;IEEE Conference on Decision and Control&lt;/a&gt;:&lt;/p&gt;

&lt;!--
\title{\LARGE \bf
Preparation of Papers for IEEE CSS Sponsored Conferences \&amp; Symposia
}
--&gt;

&lt;pre&gt;&lt;code&gt;&lt;span class=&#34;PreCondit&#34;&gt;\title{&lt;/span&gt;&lt;span class=&#34;Type&#34;&gt;\LARGE&lt;/span&gt; &lt;span class=&#34;Type&#34;&gt;\bf&lt;/span&gt;
Preparation of Papers for IEEE CSS Sponsored Conferences &lt;span class=&#34;SpecialChar&#34;&gt;\&amp;amp;&lt;/span&gt; Symposia
&lt;span class=&#34;PreCondit&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(Seriously, how can anyone &lt;strong&gt;recommend&lt;/strong&gt; writing TeX code like that!)&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Removing multiple blank lines when typesetting code listings</title>
      <link>https://adityam.github.io/context-blog/post/removing-blank-lines-t-vim/</link>
      <pubDate>Sat, 29 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>https://adityam.github.io/context-blog/post/removing-blank-lines-t-vim/</guid>
      <description>&lt;p&gt;The &lt;code&gt;listings&lt;/code&gt; package in LaTeX has an option to collapse multiple empty lines
into a single empty line when typesetting code lists. Today, there was a
question on &lt;a href=&#34;https://tex.stackexchange.com/questions/74648/remove-blank-lines-in-minted&#34;&gt;TeX.SE&lt;/a&gt; how to do something similar when using the &lt;code&gt;minted&lt;/code&gt;
package. The &lt;code&gt;t-vim&lt;/code&gt; module uses the same principle as the &lt;code&gt;minted&lt;/code&gt; package.
So, I wondered how one could collapse multiple empty lines into a single
line in &lt;code&gt;t-vim&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Preprocessing Markdown with GPP: Or how I stopped worrying and started using Markdown like TeX</title>
      <link>https://adityam.github.io/context-blog/post/markdown-with-gpp/</link>
      <pubDate>Fri, 01 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://adityam.github.io/context-blog/post/markdown-with-gpp/</guid>
      <description>&lt;p&gt;These days I type most of simple documents (short articles, blog entries,
course notes) in markdown. Markdown provides only the basic structured
elements (sections, emphasis, urls, lists, footnotes, syntax highlighting,
simple tables and figures) which makes it easy to transform the input into
multiple output formats. Most of the time, I still want PDF output and for
that, I use &lt;a href=&#34;http://johnmacfarlane.net/pandoc/&#34;&gt;pandoc&lt;/a&gt; to convert markdown to &lt;a href=&#34;http://contextgarden.net/&#34;&gt;ConTeXt&lt;/a&gt;. At the same time, I
have the peace of mind that if I need HTML or DOC output, I’ll be able to get
that easily.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Some thoughts on lowering the learning curve for using TeX</title>
      <link>https://adityam.github.io/context-blog/post/lower-learning-curve/</link>
      <pubDate>Sun, 04 Sep 2011 20:06:31 -0700</pubDate>
      
      <guid>https://adityam.github.io/context-blog/post/lower-learning-curve/</guid>
      <description>&lt;p&gt;TeX has a steep learning curve. Often times, steeper than it needs to be.
Take, for example, the special characters in TeX. Almost every introduction to
plain TeX, eplain, LaTeX, or ConTeXt has a section on these special characters&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;\ { } $ &amp;amp; # ^ _ &amp;amp; ~
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A good introduction then goes on to explain why these special characters are
important; sometimes dropping a hint about category codes. I feel that these
details are useless and, &lt;strong&gt;at the user level&lt;/strong&gt;, we should get rid of them.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>