<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CLI on A Blog about ConTeXt</title>
    <link>https://adityam.github.io/context-blog/categories/cli/</link>
    <description>Recent content in CLI on A Blog about ConTeXt</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 02 Nov 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://adityam.github.io/context-blog/categories/cli/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Stripping metadata from PDF files</title>
      <link>https://adityam.github.io/context-blog/post/remove-metadata-pdf/</link>
      <pubDate>Tue, 02 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://adityam.github.io/context-blog/post/remove-metadata-pdf/</guid>
      <description>&lt;p&gt;Sometimes, for example when sending a review of a paper, I do not want the pdf file to contain any metadata. Ideally, the editorial process should take care of this, but I do not want to take any chances. In this post&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;, I explain a simple method to strip metadata from PDF files.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LuaTeX as a scripting language</title>
      <link>https://adityam.github.io/context-blog/post/luatex-as-a-scripting-language/</link>
      <pubDate>Mon, 16 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://adityam.github.io/context-blog/post/luatex-as-a-scripting-language/</guid>
      <description>&lt;p&gt;This post is not really about ConTeXt but about how I could use ConTeXt to
quickly hash out an idea which involved some text processing.&lt;/p&gt;
&lt;p&gt;One of my long running (for more than a decade now) ConTeXt projects is typesetting my CV. I maintain the list of publications as an XML file. I parse the
file using ConTeXt&amp;rsquo;s XML helper&amp;rsquo;s and convert the data to a Lua table, and
then typeset it using &lt;a href=&#34;https://www.pragma-ade.com/general/manuals/cld-mkiv.pdf&#34;&gt;ConTeXt Lua Documents&lt;/a&gt;. When starting with this
project, I chose XML as a data format for two reasons. First, XML scema can be
&lt;a href=&#34;https://en.wikipedia.org/wiki/XML_validation&#34;&gt;validated&lt;/a&gt; using a Schema. Second, I thought that since XML is so popular,
there must be good tools for authoring XML documents.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Finding the meaning of a command</title>
      <link>https://adityam.github.io/context-blog/post/finding-the-meaning-of-a-command/</link>
      <pubDate>Tue, 16 Jun 2020 23:44:38 -0400</pubDate>
      
      <guid>https://adityam.github.io/context-blog/post/finding-the-meaning-of-a-command/</guid>
      <description>ConTeXt has a nice command to find a meaning of a command. Sometimes the easiest way to find the meaning of a macro is to simply use
\show\macroname In LMTX, context defaults to running with --batchmode, which means that you then have to hunt for the output of \show in the console output.
ConTeXt comes with a nice script to simply get the meaning of a macro on console.
$ mtxrun --script interface --meaning &amp;lt;macroname&amp;gt; For example:</description>
    </item>
    
  </channel>
</rss>
