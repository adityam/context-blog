<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Label on A Blog about ConTeXt</title>
    <link>https://adityam.github.io/context-blog/tags/label/</link>
    <description>Recent content in Label on A Blog about ConTeXt</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 27 Feb 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://adityam.github.io/context-blog/tags/label/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Formatting metapost labels</title>
      <link>https://adityam.github.io/context-blog/post/formatting-metapost-label/</link>
      <pubDate>Thu, 27 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://adityam.github.io/context-blog/post/formatting-metapost-label/</guid>
      <description>&lt;p&gt;The standard way to typeset labels in metapost is using &lt;code&gt;label(btex ... etex, pos)&lt;/code&gt;, which uses TeX to typeset the label and then includes it in the metapost graphic. ConTeXt simplifies the user interface a little: instead of using &lt;code&gt;btex ... etex&lt;/code&gt;, one can simply use &lt;code&gt;label(&amp;quot;...&amp;quot;, pos)&lt;/code&gt;, and the string argument is typeset using ConTeXt and included in the meapost graphic. However, both of these are cumbersome to use for dynamically generated labels (i.e., labels whose text depends on the value of some metapost variable). In this post, I show how to use &lt;code&gt;fmtlabel&lt;/code&gt;, makes it simple to use dynamically generated labels.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Metapost and TeX labels</title>
      <link>https://adityam.github.io/context-blog/post/metapost-and-tex-labels/</link>
      <pubDate>Wed, 22 Jan 2014 19:25:23 -0700</pubDate>
      <guid>https://adityam.github.io/context-blog/post/metapost-and-tex-labels/</guid>
      <description>&lt;p&gt;Default Metapost has the concept of two types of labels, postscript labels and&#xA;TeX labels. Postscript labels are created using&lt;/p&gt;&#xA;&lt;!--&#xA;label(&#34;text&#34;, location);&#xA;--&gt;&#xA;&lt;pre&gt;&lt;code&gt;&lt;span class=&#34;Macro&#34;&gt;label&lt;/span&gt;(&lt;span class=&#34;String&#34;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;, location);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;while TeX labels are created using&lt;/p&gt;&#xA;&lt;!-- &#xA;label(btex text etex, location);&#xA;--&gt;&#xA;&lt;pre&gt;&lt;code&gt;&lt;span class=&#34;Macro&#34;&gt;label&lt;/span&gt;(&lt;span class=&#34;Statement&#34;&gt;btex&lt;/span&gt;&lt;span class=&#34;String&#34;&gt; text &lt;/span&gt;&lt;span class=&#34;Statement&#34;&gt;etex&lt;/span&gt;, location);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;In the latter case,  Metapost collects everything between &lt;code&gt;btex&lt;/code&gt; and &lt;code&gt;etex&lt;/code&gt;&#xA;in a separate file, processes that file through TeX, and includes the&#xA;resulting postscript code at an appropriate location. Such a Rube&#xA;Golberg-esque mechanism is needed to propertly typeset mathematics, get&#xA;proper kerning, etc.; tasks that TeX can do but Postscript cannot.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
