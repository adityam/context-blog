<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Random Determinism</title>
    <link>https://adityam.github.io/context-blog/</link>
    <description>Recent content on Random Determinism</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 15 Apr 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://adityam.github.io/context-blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Designing cover page for an exam</title>
      <link>https://adityam.github.io/context-blog/post/exam-coverpage/</link>
      <pubDate>Mon, 15 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://adityam.github.io/context-blog/post/exam-coverpage/</guid>
      <description>&lt;p&gt;Our university has a specific style that courses need to use as a cover page
for exams, shown below. They circulate a Word template at the beginning of
each term. Since I typeset my exams in ConTeXt, I decided to translate this
cover page template to ConTeXt as well. In this post, I&amp;rsquo;ll explain how I went
about doing this translation.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Seamlessly switching between different context versions</title>
      <link>https://adityam.github.io/context-blog/post/setuptex/</link>
      <pubDate>Thu, 11 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://adityam.github.io/context-blog/post/setuptex/</guid>
      <description>&lt;p&gt;Recently, Hans
&lt;a href=&#34;https://www.mail-archive.com/ntg-context@ntg.nl/msg90783.html&#34;&gt;announced&lt;/a&gt; the
prerelease of a new version of ConTeXt called LuaMetapostTeX or LMTX for short.
LMTX is supposed to a streamlined and stripped down version of LuaTeX where
most of the backend code for writing PDF and images has been removed from the
engine and is handled by macro package using Lua code. Some of the rationale
for the change in discussed &lt;a href=&#34;https://www.mail-archive.com/ntg-context@ntg.nl/msg90917.html&#34;&gt;in this
post&lt;/a&gt; and more
details including the source code and documentation will be available when
LMTX will be formally released in this year&amp;rsquo;s ConTeXt meeting. Currently just
the binary is available for testing from &lt;a href=&#34;http://www.pragma-ade.nl/install.htm&#34;&gt;Pragma Ade&amp;rsquo;s
website&lt;/a&gt;. There is no change in
user-facing code, so in principle, one can simply switch from ConTeXt MkIV to
LMTX without making any change in the tex file.&lt;/p&gt;

&lt;p&gt;In my tests so far, I could compile all my documents using LMTX without any
noticeable difference. Nonetheless, I want to keep ConTeXt MkIV around for
some critical projects like typesetting material for courses that I teach.
In this post, I&amp;rsquo;ll explain my setup for using ConTeXt MkIV and LMTX in
parallel.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Frame With Solid Left Line Redux</title>
      <link>https://adityam.github.io/context-blog/post/frame-with-solid-left-line-redux/</link>
      <pubDate>Sun, 24 Mar 2019 12:07:55 -0400</pubDate>
      
      <guid>https://adityam.github.io/context-blog/post/frame-with-solid-left-line-redux/</guid>
      <description>&lt;p&gt;As I had &lt;a href=&#34;../frame-with-solid-left-line&#34;&gt;posted earlier&lt;/a&gt;, I like the visual
effect of placing a solid line on the left side of a block:&lt;/p&gt;

&lt;img class=&#34;center&#34;
  alt=&#34;Simple example&#34;
  src=&#34;https://adityam.github.io/context-blog/context-blog/post/frame-with-solid-left-line/leftframe-0.png&#34; /&gt;


&lt;p&gt;I use this for displaying short code snippets in the lecture notes of a course
that I teach. Typically these are a few lines of Matlab code but recently I
needed to post a bigger code snippet where the frame should break across the
page. In principle, this should have been a simple change—replace the &lt;code&gt;framed&lt;/code&gt;
with a &lt;code&gt;textbackground&lt;/code&gt;—but that did not work out of the box. This blog post
explains a simple solution.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Speeding up PGFPlots using LuaTeX</title>
      <link>https://adityam.github.io/context-blog/post/speeding-pgfplot-using-luatex/</link>
      <pubDate>Sun, 21 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://adityam.github.io/context-blog/post/speeding-pgfplot-using-luatex/</guid>
      <description>&lt;p&gt;In the &lt;a href=&#34;../metapost-vs-tikz-speed&#34;&gt;previous post&lt;/a&gt;, I compared the speed of
Metapost and TikZ for drawing similar graphics and found that &lt;strong&gt;TikZ is three
to five times slower than Metapost&lt;/strong&gt;. Although TikZ is slower, it does provide
a much higher level interface to drawing graphics and shifting to Metapost can
take a lot of &lt;em&gt;user time&lt;/em&gt;, which is often more valuable than &lt;em&gt;computer time&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;As an example, consider the &lt;a href=&#34;https://ctan.org/pkg/pgfplots&#34;&gt;PGFPlots&lt;/a&gt; package, which provides a high-level
interface for drawing function plots. Although there is a &lt;a href=&#34;https://github.com/contextgarden/context-mirror/blob/beta/metapost/context/base/mpiv/mp-grap.mpiv&#34;&gt;Metapost package
for drawing
graphs&lt;/a&gt;, PGFPlots has more features and better documentation. In this post, I show that we can speed up plotting functions using PGFPlots by offloading the function computation to LuaTeX.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Comparing the speed of Metapost and TikZ</title>
      <link>https://adityam.github.io/context-blog/post/metapost-vs-tikz-speed/</link>
      <pubDate>Wed, 10 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://adityam.github.io/context-blog/post/metapost-vs-tikz-speed/</guid>
      <description>&lt;p&gt;As a frequent user of both Metapost and TikZ, I often observe that TikZ is
considerably slower than Metapost. But what&amp;rsquo;s the actual difference in speed?
Let&amp;rsquo;s consider basic operations: drawing straight lines and drawing circles.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Externalizing Metapost graphics</title>
      <link>https://adityam.github.io/context-blog/post/externalizing-metapost/</link>
      <pubDate>Mon, 08 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://adityam.github.io/context-blog/post/externalizing-metapost/</guid>
      <description>TikZ has a library external that converts a TikZ picture to a separate PDF. The TikZ documentation provides three reasons of why external images are useful:
 Compiling large images takes a lot of time. However, most images do not change from run to run. So, it can save time to export finished images and include them as external figures. Sometimes, it is desirable to have separate graphics, for example to include them in third party programs (think XHTML export).</description>
    </item>
    
    <item>
      <title>Making visaully attractive posters in ConTeXt</title>
      <link>https://adityam.github.io/context-blog/post/poster-in-context/</link>
      <pubDate>Sat, 25 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://adityam.github.io/context-blog/post/poster-in-context/</guid>
      <description>Posters are not or rather were not too common in my research field, so I have never really had a need to create posters. But this is now changing and every now and then, we have to make a poster presentation. I have looked at the different options available for creating posters (see, for example, this TeX.SE post) but I find all of them to be boring. Given that poster sessions are crammed, it is important to create a poster that is visually distinct.</description>
    </item>
    
    <item>
      <title>Drawing Metapost animations</title>
      <link>https://adityam.github.io/context-blog/post/metapost-animation/</link>
      <pubDate>Sun, 15 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://adityam.github.io/context-blog/post/metapost-animation/</guid>
      <description>&lt;p&gt;The &lt;a href=&#34;http://wiki.contextgarden.net/Animation#Using_the_animation_module&#34;&gt;animation&lt;/a&gt; module provides a nice interface for using
&lt;a href=&#34;http://www.pragma-ade.com/general/manuals/mwidget-s.pdf&#34;&gt;FieldStacks&lt;/a&gt; to create a JavaScript controlled animations in
ConTeXt.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; For example, the following code will show &lt;code&gt;step-1.pdf&lt;/code&gt;,
&lt;code&gt;step-2.pdf&lt;/code&gt;, &lt;code&gt;step-3.pdf&lt;/code&gt;, and &lt;code&gt;step-4.pdf&lt;/code&gt; files one by one:&lt;/p&gt;

&lt;!--
\usemodule[animation]

\startanimation[menu=yes]
  {\useexternalfigure[step-1]}
  {\useexternalfigure[step-2]}
  {\useexternalfigure[step-3]}
  {\useexternalfigure[step-4]}
\stopanimation
--&gt;

&lt;pre&gt;&lt;code&gt;&lt;span class=&#34;Statement&#34;&gt;\usemodule&lt;/span&gt;&lt;span class=&#34;Delimiter&#34;&gt;[&lt;/span&gt;animation&lt;span class=&#34;Delimiter&#34;&gt;]&lt;/span&gt;

&lt;span class=&#34;Statement&#34;&gt;\startanimation&lt;/span&gt;&lt;span class=&#34;Delimiter&#34;&gt;[&lt;/span&gt;menu=yes&lt;span class=&#34;Delimiter&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;Delimiter&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;Statement&#34;&gt;\useexternalfigure&lt;/span&gt;&lt;span class=&#34;Delimiter&#34;&gt;[&lt;/span&gt;step-1.pdf&lt;span class=&#34;Delimiter&#34;&gt;]}&lt;/span&gt;
  &lt;span class=&#34;Delimiter&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;Statement&#34;&gt;\useexternalfigure&lt;/span&gt;&lt;span class=&#34;Delimiter&#34;&gt;[&lt;/span&gt;step-2.pdf&lt;span class=&#34;Delimiter&#34;&gt;]}&lt;/span&gt;
  &lt;span class=&#34;Delimiter&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;Statement&#34;&gt;\useexternalfigure&lt;/span&gt;&lt;span class=&#34;Delimiter&#34;&gt;[&lt;/span&gt;step-3.pdf&lt;span class=&#34;Delimiter&#34;&gt;]}&lt;/span&gt;
  &lt;span class=&#34;Delimiter&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;Statement&#34;&gt;\useexternalfigure&lt;/span&gt;&lt;span class=&#34;Delimiter&#34;&gt;[&lt;/span&gt;step-4.pdf&lt;span class=&#34;Delimiter&#34;&gt;]}&lt;/span&gt;
&lt;span class=&#34;Statement&#34;&gt;\stopanimation&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sometimes, I use animation to give the illusion of motion. For example, to
show a particle moving along a trajectory (drawn using Metapost). In
principle, it is possible to use the &lt;code&gt;animation&lt;/code&gt; module to draw such
animations (e.g., see Wolfgang&amp;rsquo;s reply in &lt;a href=&#34;https://mailman.ntg.nl/pipermail/ntg-context/2013/070769.html&#34;&gt;on ntg-context mailing list&lt;/a&gt;), but the
interface gets a bit cumbersome. In this post, I show a helper macro to
simplify drawing such animations.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Interfacing LuaTeX with Julia</title>
      <link>https://adityam.github.io/context-blog/post/interfacing-with-julia/</link>
      <pubDate>Wed, 27 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://adityam.github.io/context-blog/post/interfacing-with-julia/</guid>
      <description>&lt;p&gt;One cool feature of LuaTeX is ability to interface with external
libraries using Lua&amp;rsquo;s &lt;a href=&#34;http://luajit.org/ext_ffi.html&#34;&gt;Foreign Function Interface (FFI)&lt;/a&gt;. An
extreme example of this is Luigi Scarso&amp;rsquo;s &lt;a href=&#34;https://www.tug.org/TUGboat/tb30-3/tb96scarso.pdf&#34;&gt;LuaTeX lunatic&lt;/a&gt;,
which provides a two way bridge between Python and LuaTeX. Not being a Python
fan, I never looked into the implementation details, in spite of Luigi&amp;rsquo;s
impressive examples.&lt;/p&gt;

&lt;p&gt;Recently, Henri Menke &lt;a href=&#34;https://tex.stackexchange.com/a/403794/323&#34;&gt;posted an interesting
example&lt;/a&gt; that shows how to use a
function from &lt;a href=&#34;https://www.gnu.org/software/gsl/&#34;&gt;GNU Scientific Library
(GSL)&lt;/a&gt; to inteface with &lt;a href=&#34;http://pgfplots.sourceforge.net&#34;&gt;pgfplots&lt;/a&gt;. This
got me interested in looking into Lua&amp;rsquo;s FFI in detail. After a bit of trial
and error, I finally figured out how to interface LuaTeX with my current
favorite programming language: &lt;a href=&#34;https://julialang.org&#34;&gt;Julia&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using Font Awesome</title>
      <link>https://adityam.github.io/context-blog/post/using-fontawesome/</link>
      <pubDate>Sun, 26 Nov 2017 20:09:19 -0500</pubDate>
      
      <guid>https://adityam.github.io/context-blog/post/using-fontawesome/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://fontawesome.io/icons/&#34;&gt;Font Awesome&lt;/a&gt; is a font that provides pictographic icons and is commonly used
to display icons for email, editing tasks, popular social media website, etc.
It is easy to use Font Awesome in ConTeXt: the font ships with &lt;a href=&#34;http://wiki.contextgarden.net/ConTeXt_Standalone&#34;&gt;ConTeXt
Standalone&lt;/a&gt; and ConTeXt includes a &lt;code&gt;symbolset&lt;/code&gt; to easily access the icons
using names rather than icon numbers.&lt;/p&gt;

&lt;p&gt;To use FontAwesome icons in ConTeXt, simply load the symbolset &lt;code&gt;fontawesome&lt;/code&gt;
using&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&lt;span class=&#34;Identifier&#34;&gt;\usesymbols&lt;/span&gt;&lt;span class=&#34;Delimiter&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;Type&#34;&gt;fontawesome&lt;/span&gt;&lt;span class=&#34;Delimiter&#34;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and then any icon is accessible using&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&lt;span class=&#34;Statement&#34;&gt;\symbol&lt;/span&gt;&lt;span class=&#34;Delimiter&#34;&gt;[&lt;/span&gt;fontawesome&lt;span class=&#34;Delimiter&#34;&gt;][&lt;/span&gt;...&lt;span class=&#34;Delimiter&#34;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;where &lt;code&gt;...&lt;/code&gt; is the name of the icon is listed in &lt;a href=&#34;http://fontawesome.io/icons/&#34;&gt;the Font Awesome icon list&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>